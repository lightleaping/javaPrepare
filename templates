## 1. 백준

1) 기본 템플릿 (Scanner 사용)

```java
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // 입력 받기 예시
        int a = sc.nextInt();
        int b = sc.nextInt();
        
        // 출력 예시
        System.out.println(a + b);

        sc.close();
    }
}
```
✅ 장점: 사용법이 직관적이며 간단한 문제에 적합
❌ 단점: 속도가 느려 대량의 입력을 받을 때 비효율적

2) 빠른 입력 템플릿 (BufferedReader 사용)

```java
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        // 입력 받기 예시
        int a = Integer.parseInt(st.nextToken());
        int b = Integer.parseInt(st.nextToken());

        // 출력 예시
        System.out.println(a + b);
    }
}
```

✅ 장점: Scanner보다 속도가 훨씬 빠름 (추천!)
❌ 단점: StringTokenizer를 사용해야 해서 코드가 길어질 수 있음

## 2. 프로그래머스 (Programmers)

1) 배열을 입력받고 결과를 반환하는 템플릿
```java
class Solution {
    public int solution(int[] numbers) {
        int answer = 0;

        for (int num : numbers) {
            answer += num;
        }

        return answer;
    }
}
```
2) 문자열을 입력받고 변환하는 문제 템플릿
```java
class Solution {
    public String solution(String s) {
        return s.toUpperCase();  // 대문자로 변환하여 반환
    }
}
```

3) 두 개의 정수를 입력받고 합을 구하는 문제 템플릿
```java
class Solution {
    public int solution(int a, int b) {
        return a + b;
    }
}
```

